[概要]
・ユニコード文字列とマルチバイト文字列(バイナリ)の相互変換を行う
・対応エンコーディング:
　・UTF-8, Shift_JIS, CP932, EUC-JP, eucJP-ms, JIS(ISO-2022-JP)


[バージョン]
・0.0.1


[API]
・creole:from_string(InputString, Encoding) -> ResultString
　ユニコード文字列を指定のエンコーディングのマルチバイト文字列に変換する。
　変換不能な文字に遭遇した場合は $? が代わりに使用される。
　- InputString:string()# 入力文字列
　- Encoding:atom()# エンコーディング方式。utf8, sjis, cp932, eucjp, eucjp_ms, jis
　- ResultString:binary()# 変換後の文字列(バイナリ)

・creole:from_string(InputString, Encoding, ErrorFun) -> ResultString | {abort, PartialResultString, RestString}
　ユニコード文字列を指定のエンコーディングのマルチバイト文字列に変換する。
　変換不能な文字に遭遇した場合は ErrorFun が呼び出される。
　- InputString:string()# 入力文字列
　- Encoding:atom()# エンコーディング方式。utf8, sjis, cp932, eucjp, eucjp_ms, jis
　- ErrorFun:function()# 変換不能な文字に遭遇した場合に呼び出される関数。
　　　                   ErrorFun(変換不能な入力文字列) ->
                   　　　　{代替文字/文字列:iodata(), 残りの入力文字列, 変換を続行するか}.
                         {_, _, false}を返した場合は、関数全体の結果として{abort,_,_}が返る。
　- ResultString:binary()# 変換後の文字列(バイナリ)

・creole:to_string(InputString, Encoding) -> ResultString
　指定のエンコーディングのマルチバイト文字列(バイナリ)をユニコード文字列に変換する。
　変換不能な文字列に遭遇した場合は $? が代わりに使用される。
　- InputString:binary()|string()# 入力マルチバイト文字列
　- Encoding:atom()# エンコーディング方式。utf8, sjis, cp932, eucjp, eucjp_ms, jis
　- ResultString:string()# 変換後の文字列

・creole:from_string(InputString, Encoding, ErrorFun) -> ResultString | {abort, PartialResultString, RestString}
　指定のエンコーディングのマルチバイト文字列(バイナリ)をユニコード文字列に変換する。
　変換不能な文字に遭遇した場合は ErrorFun が呼び出される。
　- InputString:string()# 入力マルチバイト文字列
　- Encoding:atom()# エンコーディング方式。utf8, sjis, cp932, eucjp, eucjp_ms, jis
　- ErrorFun:function()# 変換不能な文字に遭遇した場合に呼び出される関数。
　　　                   ErrorFun(変換不能な入力文字列) ->
                   　　　　{代替文字/文字列:iodata(), 残りの入力文字列, 変換を続行するか}.
                         {_, _, false}を返した場合は、関数全体の結果として{abort,_,_}が返る。
　- ResultString:binary()# 変換後の文字列


[TODO]
・テスト
・ISO-2022-JPの'JIS-X-0208-1978'に対応
　=> 現状'JIS-X-0208-1983'で代替
